/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2018-2019 Andres Almiray.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'groovy'
    id 'org.kordamp.gradle.project'          version '0.23.0'
    //id 'org.kordamp.gradle.integration-test' version '0.23.0'
    //id 'org.kordamp.gradle.functional-test'  version '0.23.0'
    id 'org.codehaus.griffon.griffon'        version '2.15.1'
}

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name          = 'GroovyConsoleFX'
        description   = 'GroovyConsole in JavaFX'
        vendor        = 'Kordamp'
        inceptionYear = '2018'
        tags          = ['groovy', 'javafx']

        links {
            website      = "https://github.com/aalmiray/${project.name}"
            issueTracker = "https://github.com/aalmiray/${project.name}/issues"
            scm          = "https://github.com/aalmiray/${project.name}.git"
        }

        specification  { enabled = false }

        implementation { enabled = false }

        publishing { enabled = false }

        people {
            person {
                id    = 'aalmiray'
                name  = 'Andres Almiray'
                roles = ['developer']
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    stats {
        paths   = [
            model:      [name: 'Models',      path: 'griffon-app/models'],
            view:       [name: 'Views',       path: 'griffon-app/views'],
            controller: [name: 'Controllers', path: 'griffon-app/controllers'],
            service:    [name: 'Services',    path: 'griffon-app/services'],
            config:     [name: 'Config',      path: 'griffon-app/conf'],
            lifecycle:  [name: 'Lifecycle',   path: 'griffon-app/lifecycle'],
            mvc:        [name: 'MVCs',        path: 'griffon-app/mvcs']
        ]
    }
}

normalization {
    runtimeClasspath {
        ignore('/META-INF/MANIFEST.MF')
    }
}

griffon {
    disableDependencyResolution = false
    includeGroovyDependencies   = true
    version                     = griffonVersion
    toolkit                     = 'javafx'
}

afterEvaluate {
    project.griffon.applicationProperties['build_date'] = project.extensions.findByName('effectiveConfig').buildInfo.buildDate
    project.griffon.applicationProperties['build_time'] = project.extensions.findByName('effectiveConfig').buildInfo.buildTime
    project.griffon.applicationProperties['build_revision'] = project.extensions.findByName('effectiveConfig').buildInfo.buildRevision
}

mainClassName = 'org.kordamp.groovy.console.Launcher'

apply from: 'gradle/javafx-plugin.gradle'

jfx {
    mainClass         = mainClassName
    allPermissions    = true
    keyStoreAlias     = 'example-user'
    keyStorePassword  = 'example-password'
    jfxMainAppJarName = jar.archiveName
    appName           = project.name
    vendor            = project.name
}

dependencies {
    griffon "org.codehaus.griffon.plugins:griffon-miglayout-plugin:$miglayoutPluginVersion"

    compile "org.codehaus.griffon:griffon-guice:$griffonVersion"

    compile "com.miglayout:miglayout-javafx:$miglayoutVersion"
    compile "org.kordamp.bootstrapfx:bootstrapfx-core:$bootstrapfxVersion"
    compile "org.kordamp.ikonli:ikonli-javafx:$ikonliVersion"
    compile "org.kordamp.ikonli:ikonli-materialdesign-pack:$ikonliVersion"

    compile("org.fxmisc.richtext:richtextfx:$richtextfxVersion") {
        exclude group: 'org.reactfx', module: 'reactfx'
    }
    compile("org.fxmisc.undo:undofx:$undofxVersion") {
        exclude group: 'org.reactfx', module: 'reactfx'
    }
    compile "org.fxmisc.flowless:flowless:$flowlessVersion"
    compile "org.fxmisc.wellbehaved:wellbehavedfx:$wellbehavedfxVersion"
    compile "de.codecentric.centerdevice:centerdevice-nsmenufx:$nsmenufxVersion"

    runtime "org.slf4j:slf4j-simple:$slf4jVersion"

    testCompile "org.codehaus.griffon:griffon-javafx-test:$griffonVersion"
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile("org.awaitility:awaitility-groovy:$awaitilityVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }

    //functionalTestCompile 'junit:junit:4.12'
    //functionalTestCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    //functionalTestCompile "org.spockframework:spock-core:${spockVersion}"
}

sourceSets.main.groovy.srcDirs += ['griffon-app/mvcs']

tasks.withType(JavaCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}
/*
startScripts {
    doLast {
        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    }
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}
*/